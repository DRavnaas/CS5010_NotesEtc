Module 3

Slides:
3.1
-----------
System design recipe
Iterative refinement recipe
2htdp/universe

What is the data/state:
Traffic light - state is current color and # ticks until it changes
Falling cat - state is position of cat and whether it is paused or not
(write data definition for that and any constants)

What inputs:
Time passing and keystrokes
(write data definition for that) 
next make a wishlist for contracts and purpose statements
then design those functions

Wishlist for cat - how does world repsone to time, how does it respond to key events, render a world to a scene
and "running the world" - run the simulation given starting state = main

(write those contract/purposes)
next - write examples for the functions
choose strategy - 
If ... in template is complicated, make it it's own function

Then helper function - (functional composition) - don't need examples, or separate tests, just debugging 
(but get full coverage)

write a few tests - as test suite so no errors until you run them (ie: all code isn't written yet)
then finish function definitions

tests - give names to typical values

put test suite next to function, put all "run-test" statements at end

Now work on helpers, finish wishlist
note that it's ok to follow template and eliminate one of the lines if you don't need that property
(ie: breaking up a structure, and you only need x you don't need y)

Last item on wishlist is main

3.2
--------------
constant versus world state?

2htdp/universe:
Provides a way of creating and running an interactive machine.
Machine will have some state.
Machine can respond to inputs. 
Response to input is described as a function.
Machine can show its state as a scene.
We will use this to create interactive animations.

State is information that changes in response to stimulus
Other things are constants

Traffic light - num ticks til next change - state, current color - state - how often things change - constant



3.3
-----------

3.4
-----------


Structural decomposition and templates
Ok to "skip" unneeded params, for example
(define-struct ball (radius color))
 (... (ball-radius ball) (ball-color ball)

If they were hard core on the template, we'd have to always 
use both parameters - even when one isn;t needed - think about
volume - you don't need color, but a hard rule would require it

so ok to skip one if you need it

also ok if you do very simple operations on selectors - for example diameter
(define (ball-volume ball)
(sphere-volume (* 2 (ball-radius ball)))

take a structure - break it into parts - that's structural decomposition

don't structural decompose two things at ones (if two balls - pick one to decompose)

if writing a cond statement
- at least one of the clauses is true
- and if that clause is an else - need to justify that
cond mostly for mixed data, itemization and partition

