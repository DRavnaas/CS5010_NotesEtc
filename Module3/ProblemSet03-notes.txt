
Module 3 code walkthrough notes

The System Design Recipe:
1. Write a purpose statement for your system.
2. Design data to represent the relevant information in the world.
3. Make a wishlist of main functions.  Write down their contracts and purpose statements.
4. Design the individual functions. Maintain a wishlist (or wishtree) of functions you will need to write.


Recipe for designing a world:

1. Information Analysis
	What events should the world respond to?
	What information changes in response to an event?
	What information doesn't change in response to an event?
2. From your information analysis, write out the constant definitions and data definitions.
3. From your list of events, write a wishlist of functions to be designed
4. Design the functions on your wishlist (use the design recipe!)


Adding a New Feature to an Existing Program
1. Perform information analysis for new feature
2. Modify data definitions as needed
3. Update existing functions to work with new data definitions
4. Write wishlist of functions for new feature
5. Design new functions following the Design Recipe
6. Repeat for the next new feature


Problem #1:
-----------------------

Question - initial world - ok to put rectangle at center?

Info analysis:

1.  Events to respond to - mouse events
2.  Rectangle state and position changed for certain mouse events
3.  Things that don't change - rectangle size, canvas size, mouse indicator size

Dimensions of canvas: constant
x pos of rectangle:  world
y pos of rectangle:  world
rectangle selected or not:  world
x pos of circle: world
y pos of circle: world
....OR mouse position = world
size of rectangle: constant

in-rectangle says whether selects or not
but then need to render without assuming x, y = new center

...or could use mouse position 


Problem #2:
-----------------------

1st step - copy over two draggable cats
Add heading (= direction) and get tests to work
Added "stop at wall"
Added handling direction keys
Added "bounce"
Added "bounce back" if dragged partially off campus

tests needed:
world-after-tick
cat-after-tick

Events to respond to: mouse events (click detection,drag,change direction), key events (pause, unpause), tick events
World changes for pause/unpause
One cat (max) changes for mouse clicks
Each cat can change for ticks

Dimensions of canvas: constant
x,y pos of cat1:  cat1
x,y pos of cat2:  cat2
both cats paused:  world
cat1 selected: cat1
cat2 selected: cat2
Size of cat: constant

