
http://www.ccs.neu.edu/course/cs5010sp14/modules/module02.html

Slides:

http://www.jamasoftware.com/wp-content/uploads/documents/wiegers-testing-the-requirements.pdf


Questions:
how is "write tests once you have requirements" different from test driven development
- one difference in the jama pdf - the tests help improve the requirements

writing tests and functional requirements + map for coverage, assess consistency and clarity
improves requirements before design and implementation

We will explore 3 important design strategies (out of five)
domain knowledge
function composition
structural decomposition
(other two are high order function composition and general recursion

Design strategy indicates how to get from the purpose statement to the code

Domain Knowledge:
- The code is produced by transcribing a mathematical formula.
- No "programming knowledge" required.
- Usually used for scalar data (e.g., numbers)
- The code produced is typically very short
- It does not call any functions except for those built into the programming language.

Function composition = wiring diagram
arguments flow in, steered through some functions

"a function composition can take any wiring diagram as its form
so logn as the wiring diagram is small"

Domain knowledge and function composition are for very short definitions only

If your "wiring diagram" gets too big - break it up into separate wiring diagrams
(or maybe you need to re-organize)


use help functions when:
- a function has pieces that can be given meaningful contracts and purpose statements, 
then break it up and use function composition.
Then apply the design recipe to design the pieces.

domain knowledge vs. functional composition:
These are very similar: both lead to function definitions that are essentially diagrams
In domain knowledge, you use only functions that are in the language (and its libraries).
It becomes function composition when you use a function that you wrote.

