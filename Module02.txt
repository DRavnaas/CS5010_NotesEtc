
Module 2 - slides


http://www.ccs.neu.edu/course/cs5010sp14/modules/module02.html

Slides:

http://www.jamasoftware.com/wp-content/uploads/documents/wiegers-testing-the-requirements.pdf


Questions:
how is "write tests once you have requirements" different from test driven development
- one difference in the jama pdf - the tests help improve the requirements

writing tests and functional requirements + map for coverage, assess consistency and clarity
improves requirements before design and implementation

We will explore 3 important design strategies (out of five)
domain knowledge
function composition
structural decomposition
(other two are high order function composition and general recursion

Design strategy indicates how to get from the purpose statement to the code

Domain Knowledge:
- The code is produced by transcribing a mathematical formula.
- No "programming knowledge" required.
- Usually used for scalar data (e.g., numbers)
- The code produced is typically very short
- It does not call any functions except for those built into the programming language.


Structural decomposition:
Used when the problem can be solved by examining a piece of non-scalar data. 

If the data is compound data, this means extracting its fields.  
If the data is itemization or partition data, this means determining which variant the data is.  
If the data is mixed data, this means determining which variant the data is, and then extracting its fields, if any. 
Every data definition includes a template that shows how this examination process is to be organized.
Writing a function using structural decomposition is accomplished by filling in the blanks in the template.


 Recipe for Structural Decomposition
1. Do the first four steps of the design recipe first!!
2. Make a copy of the template and uncomment it
3. Fill in the function name and add more arguments if needed
4. Fill in the blanks in the template with functional compositions of the arguments and the fields.

Using the template - keep cases in order

Function composition versus structual decomposition:
In function composition, you can't take look at a piece of data; all you can do is pass it around.
So (if (inside-ball? ball x y) ... ...) is function composition.
here we're just passing ball to inside-ball?, which will look at the coordinates of the ball.

On the other hand, in 
	(if (< (ball-x ball) 0) ... ...) 

Guided practice - only use structural decomposition on the thing you said you would, always follow template, including predicates

Testing:

Qualification Testing: Make sure program is ready for more serious testing
Acceptance Testing: Make sure program works on the given examples or use cases
Requirements Testing: Make sure program works as intended on other examples
Regression Testing: Make sure that a change hasn’t broken anything.
Stress Testing: How does the program perform for large inputs, heavy loads, etc.?
Usability Testing: Is the program usable by its intended audience?


(require rackunit) 
(require rackunit/text-ui)

Equivalence partitioning - vary your inputs to cover all cases

pitfalls in testing - 
some tests can have more than one correct answer - test them all
don't just paste in result as "right" answer

(explain test strategy for coverage?)

100% line coverage for test
don't need full tests for all helpers (too many is too confusing)
so some mix of understandable set of tests

helper functions can be a little more minimal (but explainable at a glance)
but put it in if in doubt (and always do contract)
functionality asked for in problem set - do full meal deal for those

problem #2 - assume machine has money to start with (assume infinite amount of change)
Not asking to design a machine that can run out of change

include *.rkt as specified in the tests

if racket defines things for you - you don't have to fill out the full meal deal for those

if an assignment lists a different name than is convenient - then you might have work to do
(ie: don't assume they means the selector or predicate - read the assignment)

Regular expressions:
? = exactly one of this symbol
* = 0 or more
this expression | that expression

assume there's some special "this is the end" keystroke

robot - "entirely in the canvas"
"turn then move"
"not entirely within the canvas"
right on the line = within (I think, read it carefully)
"

