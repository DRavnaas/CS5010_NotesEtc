
Lecture notes:
===============


problem set #5:
=================


world

tree

key events

mouse events

? can selected node be dragged off screen ? - allow selected node to be cropped
? can you move son "above" root?
? any tips for pair programming - code reviews, etc?
? What about the notebook?
? For tree template - can each node be a struct and then list of subnodes?
(example in slides, what if slides were person (name age gender)

canvas = 400x400

node size is change-able by single line of code

select a node - only selects node, not sons

dragging node drags "tree" made up nodes and sons

more than one root allowed in world

t = new node
n = new son to selected node 
u = deletes all nodes in upper half of canvas
(x = node x of leftmost son + 2 * node width)
(y = node y of leftmost son + 3 * node length)
if a son wouldn't fit, turn selected node red

d deletes a node

key event: partition
"t"
"d"
"n"
"u"
everything else

mouse event: partition
"button down"
"drag"
"button up"
everything else


world: 
- likely knows mouse x,y and list of nodes
roots = list of nodes, 


node - selected (& subtree) x,y of center & bool for "no room for child" flag
hints from required provided functions:
 center = x, y, sons = list of nodes, selected  (and our "room for child" flag)


for "leftmost" son - node calls sons to figure out leftmost node
(every son returns center, then node get max of leftmost to see if next son would fit)


use scene+line


8:50 -> 10:45

8:30 -> 9:00

2/18 10:15 -> 11:51


Scene plus line 
http://docs.racket-lang.org/teachpack/2htdpimage.html?q=scene+line&q=scene+line#%28def._%28%28lib._2htdp%2Fimage..rkt%29._scene%2Bline%29%29 

example:
(scene+line (rectangle 20 20 "solid" "gray") 
              -10 50 50 -10 "maroon") 



(place-image image x y scene) ? image?
 
  image : image? 
  x : real? 
  y : real? 
  scene : image? 



(require 2htdp/universe)
(require 2htdp/image)
(require rackunit)
(require rackunit/text-ui)

(define EMPTY-CANVAS (empty-scene 400 400))

; one rectangle on a canvas
(define scene-with-one-rectangle
  (place-image (rectangle 20 20 "outline" "green")
               100 100 
               EMPTY-CANVAS))

; two rectangles on a canvas
(define scene-with-two-rectangles
  (place-image (rectangle 20 20 "outline" "green")
  50 50 
  scene-with-one-rectangle))

; two rectangles with a line
(scene+line scene-with-two-rectangles
            50 50
            100 100
            "blue") 


;or we could use place-images for all the rectangles?

iteration could be (this is rough)

build scene with rectangle and draw line to parent

X-to-image (pass in empty canvas
use foldr to fold list into image and nodes into image
roots-to-image - higher level list of roots from world to image
nodes-to-image - helper to make a tree of nodes turn into an image
node-to-image - (maybe two variants?)
if passed parent center, - places rectangle and then draws line
if not - places rectangle only


Try not to write the same code twice (a guideline now, but will be a requirement later)

Structural decomposition on X and Y ok

ToDo:
Scene 
- merge into trees, see if function can be merged
- selected?
- room for child?
- tests
- comments

Key events:
t
n

d
u

for t:
new root, center of canvas

for "n"
1st son is directly below selected node
2nd - n, if "can fit flag"
 2 square lengths from center of left most son
 3 square heights from center of selected node

Mouse events:
button down (select)
drag (move node and subtree, handle "no room" problem)
button up (deselect)

drag (and turning red)
seems like a foldr min 0 for "lowest x position" and then comparing to 0+square width
marks "can fit son" flag



button up